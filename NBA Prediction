import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.pyplot as plt
import joblib

# -----------------------------
# Step 1: Load the Dataset
# -----------------------------
df = pd.read_csv('23-24 NBA dataset.csv')

# Optional: Inspect the dataset to verify column names
print("Columns in the dataset:")
print(df.columns)
print("\nFirst 5 rows:")
print(df.head())

# -----------------------------
# Step 2: Filter and Compute Points per Shot
# -----------------------------
# We assume each row is a game event for a shot.
# Filter to shot attempts (SHOT_ATTEMPTED_FLAG == 1)
shots = df[df['SHOT_ATTEMPTED_FLAG'] == 1].copy()

# Compute points scored for each shot:
# If the shot is made (SHOT_MADE_FLAG == 1), assign 3 points for a "3PT" shot type, else 2 points.
# If the shot is not made, points = 0.
def calculate_points(row):
    if row['SHOT_MADE_FLAG'] == 1:
        if row['SHOT_TYPE'] == '3PT':
            return 3
        else:
            return 2
    return 0

shots['POINTS'] = shots.apply(calculate_points, axis=1)

# -----------------------------
# Step 3: Aggregate Data by Game, Player, and Period
# -----------------------------
# Group by GAME_ID, PLAYER_NAME (or PLAYER_ID) and PERIOD.
# Aggregate total shot attempts, made shots, and points.
grouped = shots.groupby(['GAME_ID', 'PLAYER_NAME', 'PERIOD']).agg(
    attempts=('SHOT_ATTEMPTED_FLAG', 'sum'),
    made=('SHOT_MADE_FLAG', 'sum'),
    points=('POINTS', 'sum')
).reset_index()

# -----------------------------
# Step 4: Separate First Half and Second Half Data
# -----------------------------
# Define first half as periods 1 and 2; second half as periods 3 and 4.
first_half = grouped[grouped['PERIOD'].isin([1, 2])].groupby(['GAME_ID', 'PLAYER_NAME']).agg(
    first_half_attempts=('attempts', 'sum'),
    first_half_made=('made', 'sum'),
    first_half_points=('points', 'sum')
).reset_index()

second_half = grouped[grouped['PERIOD'].isin([3, 4])].groupby(['GAME_ID', 'PLAYER_NAME']).agg(
    second_half_attempts=('attempts', 'sum'),
    second_half_made=('made', 'sum'),
    second_half_points=('points', 'sum')
).reset_index()

# Merge first and second half data so that each row is a player's performance in a game
game_player_data = pd.merge(first_half, second_half, on=['GAME_ID', 'PLAYER_NAME'], how='inner')

# -----------------------------
# Step 5: Feature Engineering
# -----------------------------
# Create additional feature: first-half shooting percentage.
game_player_data['first_half_fg_pct'] = game_player_data.apply(
    lambda row: row['first_half_made'] / row['first_half_attempts'] if row['first_half_attempts'] > 0 else 0,
    axis=1
)

# Define features from first half and the target variable.
# Features: first-half attempts, made shots, points, and shooting percentage.
X = game_player_data[['first_half_attempts', 'first_half_made', 'first_half_points', 'first_half_fg_pct']]

# Target: total points in the second half.
y = game_player_data['second_half_points']

# -----------------------------
# Step 6: Train-Test Split
# -----------------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# -----------------------------
# Step 7: Model Training
# -----------------------------
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# -----------------------------
# Step 8: Evaluate the Model
# -----------------------------
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("\nEvaluation Metrics:")
print(f"Mean Squared Error: {mse}")
print(f"Mean Absolute Error: {mae}")
print(f"R-squared: {r2}")

# -----------------------------
# Step 9: Feature Importance Visualization
# -----------------------------
importances = model.feature_importances_
plt.figure(figsize=(8, 6))
plt.bar(X.columns, importances)
plt.title("Feature Importances")
plt.xlabel("Feature")
plt.ylabel("Importance")
plt.show()

# -----------------------------
# Step 10: Save the Model
# -----------------------------
joblib.dump(model, 'player_performance_predictor.pkl')
print("\nModel saved as 'player_performance_predictor.pkl'.")

# -----------------------------
# Step 11: Predicting on New Data Example
# -----------------------------
# For a new player/game, assume the first half stats are as follows:
# For example, 12 attempts, 6 made, 12 points (perhaps 4 made 3PT's and 2 made 2PT's, etc.),
# and a calculated FG% of 0.5.
new_data = np.array([[12, 6, 12, 0.5]])
predicted_second_half_points = model.predict(new_data)
print(f"\nPredicted second half points for new data {new_data.tolist()}: {predicted_second_half_points[0]}")
