# This code below manipulates the data frame and shows the Player Name, Team, Opponent, Game Date. 
# It also Calculates the first half and second half points by referrencing the period (1 & 2 as 1st half)(3 & 4 as 2nd half)




import pandas as pd

# -----------------------------
# Step 1: Load the Dataset
# -----------------------------
df = pd.read_csv('23-24 NBA dataset.csv')

# -----------------------------
# Step 2: Filter and Compute Points per Shot
# -----------------------------
# Filter to only rows where a shot was attempted
shots = df[df['SHOT_ATTEMPTED_FLAG'] == 1].copy()

# Define a function to compute points per shot:
def calculate_points(row):
    if row['SHOT_MADE_FLAG'] == 1:
        return 3 if row['SHOT_TYPE'] == '3PT' else 2
    return 0

shots['POINTS'] = shots.apply(calculate_points, axis=1)

# -----------------------------
# Step 3: Aggregate Data by Game, Player, Team, and Period
# -----------------------------
# Group by GAME_ID, PLAYER_NAME, TEAM_NAME, and PERIOD to sum up points.
grouped = shots.groupby(['GAME_ID', 'PLAYER_NAME', 'TEAM_NAME', 'PERIOD']).agg(
    attempts=('SHOT_ATTEMPTED_FLAG', 'sum'),
    made=('SHOT_MADE_FLAG', 'sum'),
    points=('POINTS', 'sum')
).reset_index()

# -----------------------------
# Step 4: Separate First Half and Second Half Data
# -----------------------------
# Define first half as periods 1 and 2; second half as periods 3 and 4.
first_half = grouped[grouped['PERIOD'].isin([1, 2])].groupby(
    ['GAME_ID', 'PLAYER_NAME', 'TEAM_NAME']
).agg(first_half_points=('points', 'sum')).reset_index()

second_half = grouped[grouped['PERIOD'].isin([3, 4])].groupby(
    ['GAME_ID', 'PLAYER_NAME', 'TEAM_NAME']
).agg(second_half_points=('points', 'sum')).reset_index()

# -----------------------------
# Step 5: Merge First and Second Half Data
# -----------------------------
merged_df = pd.merge(first_half, second_half, on=['GAME_ID', 'PLAYER_NAME', 'TEAM_NAME'], how='inner')

# -----------------------------
# Step 6: Merge Game Information (HTM, VTM, GAME_DATE)
# -----------------------------
# Extract game information using HTM, VTM, and GAME_DATE columns.
game_info = df[['GAME_ID', 'HTM', 'VTM', 'GAME_DATE']].drop_duplicates()
merged_df = pd.merge(merged_df, game_info, on='GAME_ID', how='left')

# -----------------------------
# Step 7: Determine Opponent Using HTM and VTM
# -----------------------------
# Create a mapping from full team names to abbreviations.
team_mapping = {
    "Atlanta Hawks": "ATL",
    "Boston Celtics": "BOS",
    "Brooklyn Nets": "BRK",
    "Charlotte Hornets": "CHO",
    "Chicago Bulls": "CHI",
    "Cleveland Cavaliers": "CLE",
    "Dallas Mavericks": "DAL",
    "Denver Nuggets": "DEN",
    "Detroit Pistons": "DET",
    "Golden State Warriors": "GSW",
    "Houston Rockets": "HOU",
    "Indiana Pacers": "IND",
    "LA Clippers": "LAC",
    "Los Angeles Lakers": "LAL",
    "Memphis Grizzlies": "MEM",
    "Miami Heat": "MIA",
    "Milwaukee Bucks": "MIL",
    "Minnesota Timberwolves": "MIN",
    "New Orleans Pelicans": "NOP",
    "New York Knicks": "NYK",
    "Oklahoma City Thunder": "OKC",
    "Orlando Magic": "ORL",
    "Philadelphia 76ers": "PHI",
    "Phoenix Suns": "PHX",
    "Portland Trail Blazers": "POR",
    "Sacramento Kings": "SAC",
    "San Antonio Spurs": "SAS",
    "Toronto Raptors": "TOR",
    "Utah Jazz": "UTA",
    "Washington Wizards": "WAS"
}

# Map TEAM_NAME to abbreviation.
merged_df['TEAM_ABBREV'] = merged_df['TEAM_NAME'].map(team_mapping)

# -----------------------------
# Step 8: Calculate Opponent
# -----------------------------
# If player's team (TEAM_ABBREV) equals HTM then opponent is VTM; if equals VTM then opponent is HTM.
merged_df['OPPONENT'] = merged_df.apply(
    lambda row: row['VTM'] if row['TEAM_ABBREV'] == row['HTM']
                else (row['HTM'] if row['TEAM_ABBREV'] == row['VTM'] else None),
    axis=1
)

# -----------------------------
# Step 9: Display the Desired Columns
# -----------------------------
result_df = merged_df[['PLAYER_NAME', 'TEAM_NAME', 'OPPONENT', 'GAME_DATE', 'first_half_points', 'second_half_points']]
print(result_df)
